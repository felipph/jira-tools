[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "JIRA",
        "importPath": "jira",
        "description": "jira",
        "isExtraImport": true,
        "detail": "jira",
        "documentation": {}
    },
    {
        "label": "JIRA",
        "importPath": "jira",
        "description": "jira",
        "isExtraImport": true,
        "detail": "jira",
        "documentation": {}
    },
    {
        "label": "tool",
        "importPath": "langchain.tools",
        "description": "langchain.tools",
        "isExtraImport": true,
        "detail": "langchain.tools",
        "documentation": {}
    },
    {
        "label": "tool",
        "importPath": "langchain.tools",
        "description": "langchain.tools",
        "isExtraImport": true,
        "detail": "langchain.tools",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FastMCP",
        "importPath": "mcp.server.fastmcp",
        "description": "mcp.server.fastmcp",
        "isExtraImport": true,
        "detail": "mcp.server.fastmcp",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.core.jira.jira_integration",
        "description": "src.core.jira.jira_integration",
        "isExtraImport": true,
        "detail": "src.core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "core.jira.jira_integration",
        "description": "core.jira.jira_integration",
        "isExtraImport": true,
        "detail": "core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"jira-tools\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"jira-tools\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"jira-tools\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"jira-tools\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"jira-tools\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "with_jira_client",
        "kind": 2,
        "importPath": "src.core.jira.jira_integration",
        "description": "src.core.jira.jira_integration",
        "peekOfCode": "def with_jira_client(func):\n    \"\"\"Decorator to ensure JIRA client is initialized.\"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        if jira_client is None:\n            init_jira_client()\n        return func(*args, **kwargs)\n    return wrapper\ndef init_jira_client() -> None:\n    \"\"\"Initialize the global JIRA client.\"\"\"",
        "detail": "src.core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "init_jira_client",
        "kind": 2,
        "importPath": "src.core.jira.jira_integration",
        "description": "src.core.jira.jira_integration",
        "peekOfCode": "def init_jira_client() -> None:\n    \"\"\"Initialize the global JIRA client.\"\"\"\n    global jira_client\n    jira_client = JIRA(server=os.environ[\"JIRA_URL\"], \n        basic_auth=(\n            os.environ[\"JIRA_ACCOUNT_EMAIL\"], \n            os.environ[\"JIRA_API_TOKEN\"])\n        )\n@with_jira_client\ndef create_jira_issue_impl(",
        "detail": "src.core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "create_jira_issue_impl",
        "kind": 2,
        "importPath": "src.core.jira.jira_integration",
        "description": "src.core.jira.jira_integration",
        "peekOfCode": "def create_jira_issue_impl(\n    project: str,   \n    parent: str,\n    assignee_email: str,\n    title: str,\n    issue_type: str,\n    description: str,\n    custom_fields: Dict[str, Any]\n) -> str:\n    \"\"\"Create a Jira issue in a specific project and parent, with custom fields and rich text description.\"\"\"",
        "detail": "src.core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "get_jira_transitions_impl",
        "kind": 2,
        "importPath": "src.core.jira.jira_integration",
        "description": "src.core.jira.jira_integration",
        "peekOfCode": "def get_jira_transitions_impl(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get all possible transitions for a Jira issue.\n    Args:\n        issue_key: The key of the issue to get transitions for (e.g., 'PROJ-123')\n    Returns:\n        A dictionary mapping transition names to their IDs\n    \"\"\"\n    transitions = jira_client.transitions(issue_key)\n    return {t['name']: t['id'] for t in transitions}\n@with_jira_client",
        "detail": "src.core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "transition_jira_issue_impl",
        "kind": 2,
        "importPath": "src.core.jira.jira_integration",
        "description": "src.core.jira.jira_integration",
        "peekOfCode": "def transition_jira_issue_impl(issue_key: str, transition_name: str) -> str:\n    \"\"\"Transition a Jira issue to a new status.\n    Args:\n        issue_key: The key of the issue to transition (e.g., 'PROJ-123')\n        transition_name: The name of the transition to perform (e.g., 'In Progress')\n    Returns:\n        A message indicating the result of the transition\n    \"\"\"\n    # Get all available transitions\n    transitions = jira_client.transitions(issue_key)",
        "detail": "src.core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "get_issue_details_impl",
        "kind": 2,
        "importPath": "src.core.jira.jira_integration",
        "description": "src.core.jira.jira_integration",
        "peekOfCode": "def get_issue_details_impl(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get the title (summary) and description of a Jira issue.\n    Args:\n        issue_key: The key of the issue to get details for (e.g., 'PROJ-123')\n    Returns:\n        A dictionary containing the issue's summary and description\n    \"\"\"\n    issue = jira_client.issue(issue_key)\n    # Handle description - return \"Sem Descrição\" if None or empty\n    description = getattr(issue.fields, 'description', None)",
        "detail": "src.core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "get_issue_types_impl",
        "kind": 2,
        "importPath": "src.core.jira.jira_integration",
        "description": "src.core.jira.jira_integration",
        "peekOfCode": "def get_issue_types_impl() -> Dict[str, Dict[str, str]]:\n    \"\"\"Get all available issue types from Jira.\n    Returns:\n        A dictionary containing issue types with their details:\n        {\n            \"type_name\": {\n                \"id\": \"id of the type\",\n                \"description\": \"type description\",\n                \"subtask\": boolean indicating if it's a subtask type,\n                \"icon_url\": \"URL to the type's icon\"",
        "detail": "src.core.jira.jira_integration",
        "documentation": {}
    },
    {
        "label": "create_jira_issue",
        "kind": 2,
        "importPath": "src.mcp.server",
        "description": "src.mcp.server",
        "peekOfCode": "def create_jira_issue(\n    project: str,\n    title: str,\n    issue_type: str,\n    description: str,\n    parent: str = None,\n    assignee_email: str = None,\n    custom_fields: Dict[str, Any] = None\n) -> str:\n    \"\"\"Create a Jira issue in a specific project and parent, with custom fields and rich text \\",
        "detail": "src.mcp.server",
        "documentation": {}
    },
    {
        "label": "get_transitions",
        "kind": 2,
        "importPath": "src.mcp.server",
        "description": "src.mcp.server",
        "peekOfCode": "def get_transitions(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get all possible transitions for a Jira issue.\n    Args:\n        issue_key: The Jira issue key\n    \"\"\"\n    return get_jira_transitions_impl(issue_key)\n@mcp.tool()\ndef transition_issue(issue_key: str, transition_name: str) -> str:\n    \"\"\"Transition a Jira issue to a new status.\n    Args:",
        "detail": "src.mcp.server",
        "documentation": {}
    },
    {
        "label": "transition_issue",
        "kind": 2,
        "importPath": "src.mcp.server",
        "description": "src.mcp.server",
        "peekOfCode": "def transition_issue(issue_key: str, transition_name: str) -> str:\n    \"\"\"Transition a Jira issue to a new status.\n    Args:\n        issue_key: The Jira issue key\n        transition_name: Name of the transition\n    \"\"\"\n    return transition_jira_issue_impl(issue_key, transition_name)\n@mcp.tool()\ndef get_issue_info(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get the title and description of a Jira issue.",
        "detail": "src.mcp.server",
        "documentation": {}
    },
    {
        "label": "get_issue_info",
        "kind": 2,
        "importPath": "src.mcp.server",
        "description": "src.mcp.server",
        "peekOfCode": "def get_issue_info(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get the title and description of a Jira issue.\n    Args:\n        issue_key: The Jira issue key\n    \"\"\"\n    return get_issue_details_impl(issue_key)\n@mcp.tool()\ndef get_issue_types() -> Dict[str, Dict[str, str]]:\n    \"\"\"Get all available issue types from Jira.\n    Returns:",
        "detail": "src.mcp.server",
        "documentation": {}
    },
    {
        "label": "get_issue_types",
        "kind": 2,
        "importPath": "src.mcp.server",
        "description": "src.mcp.server",
        "peekOfCode": "def get_issue_types() -> Dict[str, Dict[str, str]]:\n    \"\"\"Get all available issue types from Jira.\n    Returns:\n        A dictionary containing all available issue types with their details including:\n        - name: The name of the issue type\n        - id: The unique identifier\n        - description: A description of the issue type\n        - subtask: Whether this is a subtask type\n        - icon_url: URL to the issue type's icon\n    \"\"\"",
        "detail": "src.mcp.server",
        "documentation": {}
    },
    {
        "label": "mcp",
        "kind": 5,
        "importPath": "src.mcp.server",
        "description": "src.mcp.server",
        "peekOfCode": "mcp = FastMCP(\"jira-tools\")\n@mcp.tool()\ndef create_jira_issue(\n    project: str,\n    title: str,\n    issue_type: str,\n    description: str,\n    parent: str = None,\n    assignee_email: str = None,\n    custom_fields: Dict[str, Any] = None",
        "detail": "src.mcp.server",
        "documentation": {}
    },
    {
        "label": "create_jira_issue",
        "kind": 2,
        "importPath": "src.tools.langchain.jira_tools",
        "description": "src.tools.langchain.jira_tools",
        "peekOfCode": "def create_jira_issue(\n    project: str,\n    parent: str,\n    assignee_email: str,\n    title: str,\n    issue_type: str,\n    description: str,\n    custom_fields: Dict[str, Any]\n) -> str:\n    \"\"\"Create a Jira issue in a specific project and parent, with custom fields and rich text description.\"\"\"",
        "detail": "src.tools.langchain.jira_tools",
        "documentation": {}
    },
    {
        "label": "get_jira_transitions",
        "kind": 2,
        "importPath": "src.tools.langchain.jira_tools",
        "description": "src.tools.langchain.jira_tools",
        "peekOfCode": "def get_jira_transitions(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get all possible transitions for a Jira issue.\"\"\"\n    return get_jira_transitions_impl(issue_key)\n@tool(\"transition_jira_issue\")\ndef transition_jira_issue(issue_key: str, transition_name: str) -> str:\n    \"\"\"Transition a Jira issue to a new status.\"\"\"\n    return transition_jira_issue_impl(issue_key, transition_name)\n@tool(\"get_jira_issue_details\")\ndef get_issue_details(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get the title and description of a Jira issue for LLM context.",
        "detail": "src.tools.langchain.jira_tools",
        "documentation": {}
    },
    {
        "label": "transition_jira_issue",
        "kind": 2,
        "importPath": "src.tools.langchain.jira_tools",
        "description": "src.tools.langchain.jira_tools",
        "peekOfCode": "def transition_jira_issue(issue_key: str, transition_name: str) -> str:\n    \"\"\"Transition a Jira issue to a new status.\"\"\"\n    return transition_jira_issue_impl(issue_key, transition_name)\n@tool(\"get_jira_issue_details\")\ndef get_issue_details(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get the title and description of a Jira issue for LLM context.\n    Useful for understanding the content and context of an issue when generating text or making decisions.\"\"\"\n    return get_issue_details_impl(issue_key)",
        "detail": "src.tools.langchain.jira_tools",
        "documentation": {}
    },
    {
        "label": "get_issue_details",
        "kind": 2,
        "importPath": "src.tools.langchain.jira_tools",
        "description": "src.tools.langchain.jira_tools",
        "peekOfCode": "def get_issue_details(issue_key: str) -> Dict[str, str]:\n    \"\"\"Get the title and description of a Jira issue for LLM context.\n    Useful for understanding the content and context of an issue when generating text or making decisions.\"\"\"\n    return get_issue_details_impl(issue_key)",
        "detail": "src.tools.langchain.jira_tools",
        "documentation": {}
    },
    {
        "label": "get_blacklisted_fields",
        "kind": 2,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "def get_blacklisted_fields(issue_type: str) -> list:\n    \"\"\"Get the list of blacklisted fields for a given issue type.\"\"\"\n    type_specific_blacklist = FIELD_BLACKLIST.get(issue_type, [])\n    return type_specific_blacklist + GLOBAL_BLACKLIST",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "FIELD_BLACKLIST",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "FIELD_BLACKLIST = {\n    'Subtarefa': [\n        'customfield_10073',\n        'customfield_10175',\n        'customfield_10274',\n        'customfield_10176',\n        'customfield_10286',\n        'customfield_10000',\n        'customfield_10155',\n        'customfield_10002',",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "GLOBAL_BLACKLIST",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "GLOBAL_BLACKLIST = [\n    'rankBeforeIssue',\n    'rankAfterIssue',\n    'io.tempo.jira__account',\n    'customfield_10014',  # Usually represents the epic link\n    'customfield_10020',  # Sprint field\n]\ndef get_blacklisted_fields(issue_type: str) -> list:\n    \"\"\"Get the list of blacklisted fields for a given issue type.\"\"\"\n    type_specific_blacklist = FIELD_BLACKLIST.get(issue_type, [])",
        "detail": "config",
        "documentation": {}
    }
]